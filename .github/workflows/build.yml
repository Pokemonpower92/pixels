name: Build and Deploy Pipeline

on:
  push:
    branches:
      - main
    paths:
      - "cmd/**"
      - "internal/**"
      - ".github/workflows/**"
      - "build/**"

permissions:
  contents: write
  packages: write

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      short_sha: ${{ steps.set-sha.outputs.short_sha }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Detect Services
        id: set-matrix
        run: |
          SERVICES=$(find cmd -maxdepth 1 -mindepth 1 -type d -exec basename {} \; | jq -R -s -c 'split("\n")[:-1]')
          echo "matrix={\"service\":$SERVICES}" >> $GITHUB_OUTPUT
      - name: Set short SHA
        id: set-sha
        run: echo "short_sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

  build-and-push:
    needs: detect-changes
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: ${{ fromJson(needs.detect-changes.outputs.matrix).service }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set repository name
        id: repo
        run: echo "repo=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./build/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ steps.repo.outputs.repo }}/${{ matrix.service }}:${{ needs.detect-changes.outputs.short_sha }}
            ghcr.io/${{ steps.repo.outputs.repo }}/${{ matrix.service }}:latest
          build-args: |
            SERVICE_NAME=${{ matrix.service }}

  deploy-staging:
    needs: [detect-changes, build-and-push]
    runs-on: [self-hosted, k3s, pixels]
    if: github.ref == 'refs/heads/main'
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
      
      - name: Ensure namespace exists
        env:
          KUBECONFIG: /home/runner/.kube/config
        run: |
          kubectl get ns pixels-staging >/dev/null 2>&1 || kubectl create ns pixels-staging

      - name: Create GHCR image pull secret
        env:
          KUBECONFIG: /home/runner/.kube/config
        run: |
          kubectl create secret docker-registry ghcr-secret \
            --docker-server=ghcr.io \
            --docker-username="${{ github.actor }}" \
            --docker-password="${{ secrets.GITHUB_TOKEN }}" \
            -n pixels-staging \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Create JWT Secret
        env:
          KUBECONFIG: /home/runner/.kube/config
        run: |
          kubectl create secret generic jwt-secret \
            --from-literal=PRIVATE_KEY_PEM="${{ secrets.PRIVATE_KEY_PEM }}" \
            -n pixels-staging \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Set images to built SHA
        working-directory: k8s/overlays/staging
        run: |
          kustomize edit set image pixels=ghcr.io/${{ github.repository }}/api:${{ needs.detect-changes.outputs.short_sha }}
          kustomize edit set image migrate=ghcr.io/${{ github.repository }}/migrate:${{ needs.detect-changes.outputs.short_sha }}

      - name: Recreate migration job if exists
        env:
          KUBECONFIG: /home/runner/.kube/config
        run: kubectl -n pixels-staging delete job pixels-migration --ignore-not-found=true

      - name: Apply Kustomize overlay
        env:
          KUBECONFIG: /home/runner/.kube/config
        run: kubectl -n pixels-staging apply -k k8s/overlays/staging

      - name: Wait for deployment rollout
        env:
          KUBECONFIG: /home/runner/.kube/config
        run: kubectl -n pixels-staging rollout status deploy/pixels --timeout=300s

      - name: Wait for migration job completion
        env:
          KUBECONFIG: /home/runner/.kube/config
        run: |
          kubectl -n pixels-staging wait --for=condition=complete job/pixels-migration --timeout=300s || \
          (echo "migration job did not complete in time" && exit 1)
