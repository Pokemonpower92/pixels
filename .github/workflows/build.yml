name: Build and Deploy Pipeline

on:
  push:
    branches:
      - main
    paths:
      - "cmd/**"
      - "internal/**"
      - ".github/workflows/**"
      - "build/**"  

permissions:
  contents: write
  packages: write

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      short_sha: ${{ steps.set-sha.outputs.short_sha }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Detect Services
        id: set-matrix
        run: |
          SERVICES=$(find cmd -maxdepth 1 -mindepth 1 -type d -exec basename {} \; | jq -R -s -c 'split("\n")[:-1]')
          echo "matrix={\"service\":$SERVICES}" >> $GITHUB_OUTPUT
      - name: Set short SHA
        id: set-sha
        run: |
          SHORT_SHA=$(git rev-parse --short HEAD)
          echo "short_sha=${SHORT_SHA}" >> $GITHUB_OUTPUT
          
  build-and-push:
    needs: detect-changes
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: ${{ fromJson(needs.detect-changes.outputs.matrix).service }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Create new tag
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git tag "${{ matrix.service }}-${{ needs.detect-changes.outputs.short_sha }}"
          git push origin "${{ matrix.service }}-${{ needs.detect-changes.outputs.short_sha }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Set repository name
        id: repo
        run: |
          echo "repo=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./build/Dockerfile  
          push: true
          tags: |
            ghcr.io/${{ steps.repo.outputs.repo }}/${{ matrix.service }}:${{ needs.detect-changes.outputs.short_sha }}
            ghcr.io/${{ steps.repo.outputs.repo }}/${{ matrix.service }}:latest
          build-args: |
            SERVICE_NAME=${{ matrix.service }}
            
  deploy-staging:
    needs: [detect-changes, build-and-push]
    runs-on: [self-hosted, k3s, pixels]
    if: github.ref == 'refs/heads/main'
    strategy:
      matrix:
        service: ${{ fromJson(needs.detect-changes.outputs.matrix).service }}
    steps:
      - name: Deploy service to staging via Argo CD
        run: |
          argocd login argocd-server.argocd.svc.cluster.local:443 --username admin --password ${{ secrets.ARGOCD_PASSWORD }} --insecure
          if [ "${{ matrix.service }}" = "api" ]; then
            echo "Setting pixels image override..."
            argocd app set pixels-staging --kustomize-image pixels=ghcr.io/pokemonpower92/pixels/api:${{ needs.detect-changes.outputs.short_sha }}
          elif [ "${{ matrix.service }}" = "migrate" ]; then
            echo "Setting migrate image override..."
            argocd app set pixels-staging --kustomize-image migrate=ghcr.io/pokemonpower92/pixels/migrate:${{ needs.detect-changes.outputs.short_sha }}
          fi
          echo "‚úÖ Updated ${{ matrix.service }} to ${{ needs.detect-changes.outputs.short_sha }}"

  sync-deployment:
    needs: [detect-changes, deploy-staging]
    runs-on: [self-hosted, k3s, pixels]
    if: github.ref == 'refs/heads/main' && always() && !cancelled()
    steps:
      - name: Create JWT Secret
        run: |
          kubectl create secret generic jwt-secret \
            --from-literal=PRIVATE_KEY_PEM="${{ secrets.PRIVATE_KEY_PEM }}" \
            -n pixels-staging \
            --dry-run=client -o yaml | kubectl apply -f -
          echo "‚úÖ JWT secret created/updated"
          
      - name: Sync and verify deployment
        run: |
          argocd login argocd-server.argocd.svc.cluster.local:443 --username admin --password ${{ secrets.ARGOCD_PASSWORD }} --insecure
          kubectl delete job pixels-migration -n pixels-staging --ignore-not-found=true
          argocd app sync pixels-staging --timeout 300
          argocd app wait pixels-staging --timeout 600
          argocd app get pixels-staging --output json | jq -r '.status.health.status' | grep -q "Healthy"
          echo "‚úÖ Deployment successful: ${{ needs.detect-changes.outputs.short_sha }}"

  run-e2e-tests:
    needs: [detect-changes, sync-deployment]
    runs-on: [self-hosted, k3s, pixels]
    if: github.ref == 'refs/heads/main' && always() && !cancelled()
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Run e2e tests
        id: test
        run: |
          echo "üß™ Running e2e tests for deployment ${{ needs.detect-changes.outputs.short_sha }}"
          echo "üì¶ Services deployed: ${{ join(fromJson(needs.detect-changes.outputs.matrix).service, ', ') }}"
          
          # Clean up any existing test jobs
          kubectl delete job pixels-e2e-test -n pixels-staging --ignore-not-found=true
          
          # Create and run the test job (using your focused test-runner image)
          cat <<EOF | kubectl apply -f -
          apiVersion: batch/v1
          kind: Job
          metadata:
            name: pixels-e2e-test
            namespace: pixels-staging
            labels:
              test-run: "${{ github.run_id }}"
              commit: "${{ needs.detect-changes.outputs.short_sha }}"
          spec:
            ttlSecondsAfterFinished: 300
            backoffLimit: 1
            template:
              spec:
                restartPolicy: Never
                containers:
                - name: e2e-tests
                  image: ghcr.io/pokemonpower92/homelab/runner-go:latest
                  workingDir: /workspace
                  securityContext:
                    runAsUser: 0
                    runAsGroup: 0
                  env:
                  - name: TARGET_ENV
                    value: "staging"
                  - name: REPO_URL
                    value: "https://github.com/${{ github.repository }}.git"
                  - name: API_URL
                    value: "http://pixels.pixels-staging.svc.cluster.local:8080"
                  - name: COMMIT_SHA
                    value: "${{ needs.detect-changes.outputs.short_sha }}"
                  - name: DEPLOYED_SERVICES
                    value: "${{ join(fromJson(needs.detect-changes.outputs.matrix).service, ',') }}"
                  command: ["/bin/bash"]
                  args: 
                  - -c
                  - |
                    echo "üß™ Running e2e tests for deployment ${{ needs.detect-changes.outputs.short_sha }}"
                    echo "üîó Target API: \$API_URL"
                    echo "üì¶ Services deployed: \$DEPLOYED_SERVICES"
                    
                    # Debug: Check if we can resolve the service
                    echo "üîç Debugging API connectivity..."
                    nslookup pixels-api.pixels-staging.svc.cluster.local || echo "‚ö†Ô∏è DNS lookup failed"
                    
                    # Clone the repo to get the test files and Makefile
                    echo "üì• Cloning repository..."
                    git clone \$REPO_URL .
                    git checkout \$COMMIT_SHA
                    
                    # Wait for the API to be ready before running tests
                    echo "‚è≥ Waiting for API to be ready..."
                    timeout 120 bash -c 'until curl -f \$API_URL/healthcheck > /dev/null 2>&1; do 
                      echo "Waiting for API at \$API_URL..."; sleep 5; 
                    done' || {
                      echo "‚ùå API at \$API_URL failed to become ready within timeout"
                      echo "üîç Debug info:"
                      curl -v \$API_URL/healthcheck || true
                      exit 1
                    }
                    
                    echo "‚úÖ API is ready, starting e2e tests..."
                    
                    # Run your e2e test suite
                    run_test.sh
                  resources:
                    limits:
                      memory: "512Mi"
                      cpu: "500m"
                    requests:
                      memory: "256Mi"
                      cpu: "250m"
          EOF
          
          echo "‚è≥ Waiting for e2e tests to complete..."
          
          # Wait for the job to complete (success or failure)
          if kubectl wait --for=condition=complete job/pixels-e2e-test -n pixels-staging --timeout=600s; then
            echo "‚úÖ E2E tests PASSED!"
          else
            echo "‚ùå E2E tests FAILED!"
            kubectl logs job/pixels-e2e-test -n pixels-staging || true
            exit 1
          fi

      - name: Rollback and revert on test failure
        if: failure()
        run: |
          echo "üö® E2E tests failed - performing automatic rollback and revert"
          
          # Tools are pre-installed in the custom runner image! üéâ
          echo "‚ö° Step 1: ArgoCD rollback (immediate)"
          argocd login argocd-server.argocd.svc.cluster.local:443 --username admin --password ${{ secrets.ARGOCD_PASSWORD }} --insecure
          argocd app rollback pixels-staging
          
          # Use a shorter timeout and don't fail if wait times out
          echo "‚è≥ Waiting for rollback to complete..."
          timeout 60 argocd app wait pixels-staging || echo "‚ö†Ô∏è Rollback initiated but wait timed out (this is OK)"
          
          echo "‚úÖ ArgoCD rollback complete - application restored"
          
          # 2. Revert git commit to keep things in sync
          echo "üßπ Step 2: Git revert (cleanup)"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git revert ${{ github.sha }} --no-edit -m "Auto-revert: e2e tests failed for ${{ needs.detect-changes.outputs.short_sha }}"
          git push origin main
          echo "‚úÖ Git revert complete"
          
          echo ""
          echo "üéØ RECOVERY SUMMARY:"
          echo "‚ùå Failed deployment: ${{ needs.detect-changes.outputs.short_sha }}"
          echo "üîÑ ArgoCD rolled back to previous working version"
          echo "üìù Git commit reverted to keep history clean"
          echo "üìã Check test logs above for failure details"
          echo "üîó ArgoCD UI: kubectl port-forward svc/argocd-server -n argocd 8080:443"

  deployment-summary:
    needs: [detect-changes, run-e2e-tests]
    runs-on: [self-hosted, k3s, pixels]
    if: always()
    steps:
      - name: Deployment Summary
        run: |
          echo "üéØ DEPLOYMENT SUMMARY"
          echo "üìù Commit: ${{ needs.detect-changes.outputs.short_sha }}"
          echo "üè∑Ô∏è  Services: ${{ join(fromJson(needs.detect-changes.outputs.matrix).service, ', ') }}"
          
          if [[ "${{ needs.run-e2e-tests.result }}" == "success" ]]; then
            echo "‚úÖ DEPLOYMENT SUCCESSFUL!"
            echo "üéâ All services deployed and e2e tests passed"
            echo "üöÄ Deployment ${{ needs.detect-changes.outputs.short_sha }} is live in staging"
          else
            echo "‚ùå DEPLOYMENT FAILED AND ROLLED BACK"
            echo "üîÑ Application reverted to previous working version"
            echo "üí° Check e2e test failure logs above"
          fi
          
          echo ""
          echo "üîó Useful commands:"
          echo "   kubectl get pods -n pixels-staging"
          echo "   kubectl port-forward svc/argocd-server -n argocd 8080:443"
          echo "   argocd app get pixels-staging"