name: Build and Publish

on:
  push:
    branches:
      - main
    paths:
      - "cmd/**"
      - "internal/**"
      - ".github/workflows/**"
      - "build/**"  

permissions:
  contents: write
  packages: write

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Detect Services
        id: set-matrix
        run: |
          SERVICES=$(find cmd -maxdepth 1 -mindepth 1 -type d -exec basename {} \; | jq -R -s -c 'split("\n")[:-1]')
          echo "matrix={\"service\":$SERVICES}" >> $GITHUB_OUTPUT
          
  build-and-push:
    needs: detect-changes
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: ${{ fromJson(needs.detect-changes.outputs.matrix).service }}
    outputs:
      version: ${{ steps.version.outputs.version }}
      new_tag: ${{ steps.version.outputs.new_tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Create new tag
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git tag "${{ matrix.service }}-${GITHUB_SHA:0:7}"
          git push origin "${{ matrix.service }}-${GITHUB_SHA:0:7}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Set repository name
        id: repo
        run: |
          echo "repo=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./build/Dockerfile  
          push: true
          tags: |
            ghcr.io/${{ steps.repo.outputs.repo }}/${{ matrix.service }}:${{ GITHUB_SHA:0:7 }}
            ghcr.io/${{ steps.repo.outputs.repo }}/${{ matrix.service }}:latest
          build-args: |
            SERVICE_NAME=${{ matrix.service }}
            
deploy-staging:
    needs: [detect-changes, build-and-push]
    runs-on: [self-hosted, k3s, pixels]
    if: github.ref == 'refs/heads/main'
    strategy:
      matrix:
        service: ${{ fromJson(needs.detect-changes.outputs.matrix).service }}
    steps:
      - name: Install Argo CD CLI
        run: |
          if ! command -v argocd &> /dev/null; then
            curl -sSL -o /tmp/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
            chmod +x /tmp/argocd
            sudo mv /tmp/argocd /usr/local/bin/argocd
          fi
          
      - name: Deploy service to staging via Argo CD
        run: |
          IMAGE_TAG=${GITHUB_SHA:0:7}
          argocd login localhost:8081 --username admin --password ${{ secrets.ARGOCD_PASSWORD }} --insecure || exit 1
          argocd app set pixels-staging \
          --kustomize-image ${{ matrix.service }}=ghcr.io/pokemonpower92/pixels/${{ matrix.service }}:${IMAGE_TAG}
          echo "✅ Updated ${{ matrix.service }} to ${IMAGE_TAG}"}
          
      - name: Sync deployment (only once after all services updated)
        if: strategy.job-index == strategy.job-total - 1
        run: |
          argocd app sync pixels-staging --timeout 300
          argocd app wait pixels-staging --timeout 600
          
      - name: Verify deployment
        if: strategy.job-index == strategy.job-total - 1
        run: |
          argocd app get pixels-staging --output json | jq -r '.status.health.status' | grep -q "Healthy"
          echo "✅ Deployment successful: ${GITHUB_SHA:0:7}"