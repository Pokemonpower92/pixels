// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: images.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const createImage = `-- name: CreateImage :one
INSERT INTO images (
  id, image_data, created_at, updated_at
) VALUES (
  uuid_generate_v4(), $1, NOW(), NOW() 
)
RETURNING db_id, id, image_data, created_at, updated_at
`

func (q *Queries) CreateImage(ctx context.Context, imageData []byte) (*Image, error) {
	row := q.db.QueryRow(ctx, createImage, imageData)
	var i Image
	err := row.Scan(
		&i.DbID,
		&i.ID,
		&i.ImageData,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getImage = `-- name: GetImage :one
SELECT db_id, id, image_data, created_at, updated_at FROM images
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetImage(ctx context.Context, id uuid.UUID) (*Image, error) {
	row := q.db.QueryRow(ctx, getImage, id)
	var i Image
	err := row.Scan(
		&i.DbID,
		&i.ID,
		&i.ImageData,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const listImages = `-- name: ListImages :many
SELECT db_id, id, image_data, created_at, updated_at FROM images
ORDER BY created_at
`

func (q *Queries) ListImages(ctx context.Context) ([]*Image, error) {
	rows, err := q.db.Query(ctx, listImages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Image
	for rows.Next() {
		var i Image
		if err := rows.Scan(
			&i.DbID,
			&i.ID,
			&i.ImageData,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
