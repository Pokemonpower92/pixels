// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package sqlc

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  id, user_name, password, created_at, updated_at
) VALUES (
  uuid_generate_v4(), $1, $2, NOW(), NOW() 
)
RETURNING db_id, id, user_name, password, created_at, updated_at
`

type CreateUserParams struct {
	UserName string `json:"user_name"`
	Password string `json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (*User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.UserName, arg.Password)
	var i User
	err := row.Scan(
		&i.DbID,
		&i.ID,
		&i.UserName,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getUser = `-- name: GetUser :one
SELECT db_id, id, user_name, password, created_at, updated_at FROM users
WHERE user_name = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, userName string) (*User, error) {
	row := q.db.QueryRow(ctx, getUser, userName)
	var i User
	err := row.Scan(
		&i.DbID,
		&i.ID,
		&i.UserName,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
